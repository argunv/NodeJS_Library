#!/usr/bin/env node

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç API –¥–ª—è Library Catalog
 * –ó–∞–ø—É—Å–∫: node scripts/test-api.js
 */

const https = require('https');
const http = require('http');

// const BASE_URL = 'http://localhost:3000';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(options, data = null) {
  return new Promise((resolve, reject) => {
    const protocol = options.protocol === 'https:' ? https : http;

    const req = protocol.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => body += chunk);
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          body: body
        });
      });
    });

    req.on('error', reject);

    if (data) {
      req.write(JSON.stringify(data));
    }

    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function logResult(testName, success, message = '') {
  const status = success ? '‚úÖ' : '‚ùå';
  const color = success ? colors.green : colors.red;
  console.log(`${color}${status} ${testName}${colors.reset} ${message}`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log(`${colors.blue}üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Library Catalog API${colors.reset}`);
  console.log('='.repeat(60));
  console.log('');

  let token = '';
  let bookId = '';
  let testResults = { passed: 0, failed: 0 };

  try {
    // –¢–µ—Å—Ç 1: Health Check
    console.log(`${colors.yellow}1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Health Endpoint${colors.reset}`);
    const healthResponse = await makeRequest({
      method: 'GET',
      hostname: 'localhost',
      port: 3000,
      path: '/api/health',
      headers: { 'Content-Type': 'application/json' }
    });

    const healthSuccess = healthResponse.statusCode === 200;
    logResult('Health Check', healthSuccess, `Status: ${healthResponse.statusCode}`);
    if (healthSuccess) testResults.passed++; else testResults.failed++;

    // –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    console.log(`${colors.yellow}2. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è${colors.reset}`);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
    const loginResponse = await makeRequest({
      method: 'POST',
      hostname: 'localhost',
      port: 3000,
      path: '/api/auth/login',
      headers: { 'Content-Type': 'application/json' }
    }, {
      email: 'test@example.com',
      password: 'password123'
    });

    let authSuccess = false;
    
    if (loginResponse.statusCode === 200) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –≤—Ö–æ–¥–∞
      const loginData = JSON.parse(loginResponse.body);
      token = loginData.token;
      console.log(`   –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É —É—Å–ø–µ—à–µ–Ω, —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${token.substring(0, 20)}...`);
      authSuccess = true;
      logResult('–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É', true, `Status: ${loginResponse.statusCode}`);
    } else {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...`);
      const registerResponse = await makeRequest({
        method: 'POST',
        hostname: 'localhost',
        port: 3000,
        path: '/api/auth/register',
        headers: { 'Content-Type': 'application/json' }
      }, {
        email: 'test@example.com',
        password: 'password123',
        name: 'Test User'
      });

      if (registerResponse.statusCode === 201) {
        const registerData = JSON.parse(registerResponse.body);
        token = registerData.token;
        console.log(`   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${token.substring(0, 20)}...`);
        authSuccess = true;
        logResult('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', true, `Status: ${registerResponse.statusCode}`);
      } else {
        logResult('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', false, `Status: ${registerResponse.statusCode}`);
      }
    }

    if (authSuccess) {
      testResults.passed++;
    } else {
      testResults.failed++;
    }

    // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    console.log(`${colors.yellow}3. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è${colors.reset}`);
    const profileResponse = await makeRequest({
      method: 'GET',
      hostname: 'localhost',
      port: 3000,
      path: '/api/auth/profile',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    });

    const profileSuccess = profileResponse.statusCode === 200;
    logResult('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è', profileSuccess, `Status: ${profileResponse.statusCode}`);
    if (profileSuccess) testResults.passed++; else testResults.failed++;

    // –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
    console.log(`${colors.yellow}4. –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–∏–≥–∏${colors.reset}`);
    const createBookResponse = await makeRequest({
      method: 'POST',
      hostname: 'localhost',
      port: 3000,
      path: '/api/books',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    }, {
      title: 'The Great Gatsby',
      author: 'F. Scott Fitzgerald',
      isbn: '978-0-7432-7356-5',
      description: 'A classic American novel about the Jazz Age',
      publishedAt: '1925-04-10T00:00:00.000Z'
    });

    const createBookSuccess = createBookResponse.statusCode === 201;
    logResult('–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–∏–≥–∏', createBookSuccess, `Status: ${createBookResponse.statusCode}`);

    if (createBookSuccess) {
      const bookData = JSON.parse(createBookResponse.body);
      bookId = bookData.data.id;
      console.log(`   ID –∫–Ω–∏–≥–∏: ${bookId}`);
      testResults.passed++;
    } else {
      testResults.failed++;
    }

    // –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥
    console.log(`${colors.yellow}5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥${colors.reset}`);
    const getBooksResponse = await makeRequest({
      method: 'GET',
      hostname: 'localhost',
      port: 3000,
      path: '/api/books',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    });

    const getBooksSuccess = getBooksResponse.statusCode === 200;
    logResult('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥', getBooksSuccess, `Status: ${getBooksResponse.statusCode}`);
    if (getBooksSuccess) testResults.passed++; else testResults.failed++;

    // –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –ø–æ ID
    console.log(`${colors.yellow}6. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –ø–æ ID${colors.reset}`);
    const getBookResponse = await makeRequest({
      method: 'GET',
      hostname: 'localhost',
      port: 3000,
      path: `/api/books/${bookId}`,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    });

    const getBookSuccess = getBookResponse.statusCode === 200;
    logResult('–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –ø–æ ID', getBookSuccess, `Status: ${getBookResponse.statusCode}`);
    if (getBookSuccess) testResults.passed++; else testResults.failed++;

    // –¢–µ—Å—Ç 7: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏
    console.log(`${colors.yellow}7. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏${colors.reset}`);
    const updateBookResponse = await makeRequest({
      method: 'PUT',
      hostname: 'localhost',
      port: 3000,
      path: `/api/books/${bookId}`,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    }, {
      title: 'The Great Gatsby (Updated)',
      description: 'An updated description of this classic novel'
    });

    const updateBookSuccess = updateBookResponse.statusCode === 200;
    logResult('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏', updateBookSuccess, `Status: ${updateBookResponse.statusCode}`);
    if (updateBookSuccess) testResults.passed++; else testResults.failed++;

    // –¢–µ—Å—Ç 8: –ü–æ–∏—Å–∫ –∫–Ω–∏–≥
    console.log(`${colors.yellow}8. –ü–æ–∏—Å–∫ –∫–Ω–∏–≥${colors.reset}`);
    const searchBooksResponse = await makeRequest({
      method: 'GET',
      hostname: 'localhost',
      port: 3000,
      path: '/api/books?search=gatsby&limit=5',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    });

    const searchBooksSuccess = searchBooksResponse.statusCode === 200;
    logResult('–ü–æ–∏—Å–∫ –∫–Ω–∏–≥', searchBooksSuccess, `Status: ${searchBooksResponse.statusCode}`);
    if (searchBooksSuccess) testResults.passed++; else testResults.failed++;

    // –¢–µ—Å—Ç 9: –¢–µ—Å—Ç –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    console.log(`${colors.yellow}9. –¢–µ—Å—Ç –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏${colors.reset}`);
    const unauthResponse = await makeRequest({
      method: 'GET',
      hostname: 'localhost',
      port: 3000,
      path: '/api/books',
      headers: { 'Content-Type': 'application/json' }
    });

    const unauthSuccess = unauthResponse.statusCode === 401;
    logResult('–¢–µ—Å—Ç –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏', unauthSuccess, `Status: ${unauthResponse.statusCode}`);
    if (unauthSuccess) testResults.passed++; else testResults.failed++;

    // –¢–µ—Å—Ç 10: –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
    console.log(`${colors.yellow}10. –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º${colors.reset}`);
    const invalidTokenResponse = await makeRequest({
      method: 'GET',
      hostname: 'localhost',
      port: 3000,
      path: '/api/books',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer invalid-token'
      }
    });

    const invalidTokenSuccess = invalidTokenResponse.statusCode === 401;
    logResult('–¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º', invalidTokenSuccess, `Status: ${invalidTokenResponse.statusCode}`);
    if (invalidTokenSuccess) testResults.passed++; else testResults.failed++;

    // –¢–µ—Å—Ç 11: –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    console.log(`${colors.yellow}11. –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö${colors.reset}`);
    const validationResponse = await makeRequest({
      method: 'POST',
      hostname: 'localhost',
      port: 3000,
      path: '/api/books',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    }, {
      title: '', // –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      author: 'Test Author'
    });

    const validationSuccess = validationResponse.statusCode === 400;
    logResult('–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö', validationSuccess, `Status: ${validationResponse.statusCode}`);
    if (validationSuccess) testResults.passed++; else testResults.failed++;

    // –¢–µ—Å—Ç 12: –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏
    console.log(`${colors.yellow}12. –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏${colors.reset}`);
    const deleteBookResponse = await makeRequest({
      method: 'DELETE',
      hostname: 'localhost',
      port: 3000,
      path: `/api/books/${bookId}`,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    });

    const deleteBookSuccess = deleteBookResponse.statusCode === 200;
    logResult('–£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏', deleteBookSuccess, `Status: ${deleteBookResponse.statusCode}`);
    if (deleteBookSuccess) testResults.passed++; else testResults.failed++;

    // –¢–µ—Å—Ç 13: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
    console.log(`${colors.yellow}13. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏${colors.reset}`);
    const checkDeletedResponse = await makeRequest({
      method: 'GET',
      hostname: 'localhost',
      port: 3000,
      path: `/api/books/${bookId}`,
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    });

    const checkDeletedSuccess = checkDeletedResponse.statusCode === 404;
    logResult('–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏', checkDeletedSuccess, `Status: ${checkDeletedResponse.statusCode}`);
    if (checkDeletedSuccess) testResults.passed++; else testResults.failed++;

  } catch (error) {
    console.error(`${colors.red}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: ${error.message}${colors.reset}`);
    testResults.failed++;
  }

  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log('');
  console.log('='.repeat(60));
  console.log(`${colors.blue}üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:${colors.reset}`);
  console.log(`${colors.green}‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${testResults.passed}${colors.reset}`);
  console.log(`${colors.red}‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${testResults.failed}${colors.reset}`);
  console.log(`üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((testResults.passed / (testResults.passed + testResults.failed)) * 100)}%`);
  console.log('');

  if (testResults.failed === 0) {
    console.log(`${colors.green}üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!${colors.reset}`);
  } else {
    console.log(`${colors.yellow}‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞.${colors.reset}`);
  }

  console.log('');
  console.log(`${colors.blue}üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API –æ—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:3000/api-docs${colors.reset}`);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(console.error);
