name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: library_catalog_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma Client
      run: npx prisma generate

    - name: Run database migrations
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/library_catalog_test?schema=public

    - name: Run linting
      run: |
        npm run lint || echo "Linting not configured, skipping..."

    - name: Run tests with coverage
      run: npm test -- --coverage --watchAll=false
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/library_catalog_test?schema=public
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-key

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Coverage Report
      run: |
        echo "Coverage Report:"
        cat coverage/coverage-summary.txt || echo "Coverage summary not found"

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Run dependency check
      run: npm audit --audit-level high

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: docker build -t library-catalog-api:test .

    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container -p 3000:3000 library-catalog-api:test
        sleep 10
        curl -f http://localhost:3000/api/health || exit 1
        docker stop test-container

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy notification
      run: |
        echo "üöÄ Deployment to staging would happen here"
        echo "‚úÖ All checks passed - ready for deployment"
        echo "üîí Security: Passed"
        echo "üê≥ Docker: Built successfully"
